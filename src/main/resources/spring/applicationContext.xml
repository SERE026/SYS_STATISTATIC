<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	default-lazy-init="false"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- <context:property-placeholder ignore-unresolvable="true" location="classpath*:/db.properties" /> -->
    
    <!-- 数据源配置 -->
    <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
		    数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass
		    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
		    
			基本属性 url、user、password
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			
			配置初始化大小、最小、最大
			<property name="initialSize" value="${pool.initialSize}" />
			<property name="minIdle" value="${pool.minIdle}" /> 
			<property name="maxActive" value="${pool.maxActive}" />
			
			配置获取连接等待超时的时间
			<property name="maxWait" value="60000" />
			
			配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			
			配置一个连接在池中最小生存的时间，单位是毫秒
			<property name="minEvictableIdleTimeMillis" value="300000" />
			
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			
			配置监控统计拦截的filters
		    <property name="filters" value="stat" /> 
	</bean> -->
	
	<!-- jdbcTemplate 配置 -->
    <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref local="dataSource"/>
        </property>
    </bean> -->
    
    <!-- 事务处理 -->
    <!-- <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean> -->
    
    <!-- Spring 工具类 -->
	<bean id="springContextHolder" class="com.ycm.util.SpringContextHolder" lazy-init="false"/>
	
	<!-- 自动搜索非@Controller标注的类，和非拦截器 -->
	<context:component-scan base-package="com.ycm">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 
	1. 注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 
	以及 RequiredAnnotationBeanPostProcessor  这 4 个BeanPostProcessor。
	2. 目的是能够让spring容器识别注解 ，
	3. 如果使用 <context:component-scan /> 扫描所有包，则可以不使用此配置 -->
    <context:annotation-config/>
</beans>